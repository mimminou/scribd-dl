// import { app } from './src/App.js'
// import * as scribdFlag  from './src/const/ScribdFlag.js'
//
// const flags = [scribdFlag.DEFAULT, scribdFlag.IMAGE]
//
// if (process.argv.length >= 3) {
//     let url;
//     let flag;
//     for (let i = 2; i < process.argv.length; i++) {
//         if (flags.includes(process.argv[i])) {
//             flag = process.argv[i]
//         } else {
//             url = process.argv[i]
//         }
//     }
//     await app.execute(url, flag)
// } else {
//     console.error(`
// Usage: npm start [options] url
// Options:  
//   /i        image-based: generated by image snapshots taken for pages on scribd.com
//     `)
// }

import express from "express"
import { app } from './src/App.js'
import path from 'path';

const expressApp = express();
const port = 9003
const router = express.Router();

let currentProgress = 0; // global, reset per request or per session

export function setProgress(p) {
	currentProgress = p;
}

export function getProgress() {
	return currentProgress;
}


expressApp.use(express.json());
expressApp.use(express.static('public')) // serve HTML from /public

expressApp.get('/progress', (req, res) => {
	res.json({ progress: getProgress() })
})

expressApp.post('/run', async (req, res) => {
	const { url, flag } = req.body; // you can pass the mode flag too
	if (!url) return res.status(400).send('No URL provided');
	try {
		// Call your execute function directly
		const filePath = await app.execute(url, flag); // must return the PDF path
		res.download(filePath); // send PDF to user
	} catch (err) {
		console.error(err);
		res.status(500).send('Script failed: ' + err.message);
	}
})

// expressApp.use("", router)

expressApp.listen(port, () => {
	console.log(`Server running on http://localhost:${port}`);
});

